import { useState } from "react";
import { FileText, Download, Calendar, BarChart3, TrendingUp, Activity, Filter, Search, Eye, Settings, RefreshCw, FileDown } from "lucide-react";
import { StatsCard } from "@/components/ui/stats-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { StatusBadge } from "@/components/ui/status-badge";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// Mock data for reports
const recentReports = [
  {
    id: "RPT001",
    name: "Weekly Donation Summary",
    type: "Donation Report", 
    generatedDate: "2024-01-16",
    period: "Jan 8-14, 2024",
    status: "completed",
    fileSize: "2.3 MB",
    format: "PDF",
    content: {
      totalDonations: 145,
      successfulDonations: 142,
      bloodTypes: { "O+": 45, "A+": 38, "B+": 32, "AB+": 15, "O-": 8, "A-": 7 },
      locations: ["Main Center", "City Hospital", "University Drive"]
    }
  },
  {
    id: "RPT002",
    name: "Monthly Quality Control",
    type: "Quality Report",
    generatedDate: "2024-01-15", 
    period: "December 2023",
    status: "completed",
    fileSize: "5.1 MB",
    format: "PDF",
    content: {
      testsConducted: 289,
      passedTests: 285,
      failedTests: 4,
      successRate: "98.6%"
    }
  },
  {
    id: "RPT003",
    name: "Distribution Analytics",
    type: "Distribution Report",
    generatedDate: "2024-01-14",
    period: "Jan 1-14, 2024", 
    status: "processing",
    fileSize: null,
    format: "Excel"
  },
  {
    id: "RPT004",
    name: "Regulatory Compliance Audit",
    type: "Compliance Report",
    generatedDate: "2024-01-12",
    period: "Q4 2023",
    status: "completed",
    fileSize: "8.7 MB",
    format: "PDF",
    content: {
      auditScore: "98%",
      complianceItems: 45,
      passedItems: 44,
      recommendations: 2
    }
  }
];

const auditTrail = [
  {
    id: "AUD001",
    action: "Report Generated",
    user: "Dr. Sarah Johnson",
    target: "Weekly Donation Summary",
    timestamp: "2024-01-16 09:30:15",
    ipAddress: "192.168.1.45"
  },
  {
    id: "AUD002", 
    action: "Data Export",
    user: "Mike Anderson",
    target: "Inventory Report - Excel",
    timestamp: "2024-01-16 08:15:22",
    ipAddress: "192.168.1.67"
  },
  {
    id: "AUD003",
    action: "Report Deleted",
    user: "Dr. Sarah Johnson", 
    target: "Test Report - Dec 2023",
    timestamp: "2024-01-15 16:45:33",
    ipAddress: "192.168.1.45"
  },
  {
    id: "AUD004",
    action: "Settings Modified",
    user: "Admin User",
    target: "Report Generation Schedule",
    timestamp: "2024-01-15 14:20:18",
    ipAddress: "192.168.1.12"
  }
];

const getReportStatusVariant = (status: string) => {
  switch (status) {
    case "completed": return "success";
    case "processing": return "warning";
    case "failed": return "critical";
    default: return "info";
  }
};

export default function Reports() {
  const [reports, setReports] = useState(recentReports);
  const [searchTerm, setSearchTerm] = useState("");
  const [reportTypeFilter, setReportTypeFilter] = useState("all");
  const [statusFilter, setStatusFilter] = useState("all");
  const [isGenerating, setIsGenerating] = useState(false);

  const filteredReports = reports.filter(report => {
    const matchesSearch = report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         report.type.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = reportTypeFilter === "all" || report.type === reportTypeFilter;
    const matchesStatus = statusFilter === "all" || report.status === statusFilter;
    
    return matchesSearch && matchesType && matchesStatus;
  });

  const totalReports = reports.length;
  const completedReports = reports.filter(report => report.status === "completed").length;
  const processingReports = reports.filter(report => report.status === "processing").length;
  const auditEntries = auditTrail.length;

  const downloadReport = (report, format = "PDF") => {
    const content = `
${report.name.toUpperCase()}
Generated: ${report.generatedDate}
Period: ${report.period}
Type: ${report.type}

${format === "PDF" ? `
SUMMARY:
• Total Data Points: ${report.content ? Object.values(report.content).length : 'N/A'}
• Status: ${report.status.toUpperCase()}
• File Size: ${report.fileSize || 'Processing'}

DETAILED CONTENT:
${report.content ? JSON.stringify(report.content, null, 2) : 'No content available'}

Generated by Blood Bank Management System
${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}
` : 
`ID,Name,Type,Period,Status,Size
${report.id},${report.name},${report.type},${report.period},${report.status},${report.fileSize || 'N/A'}
`}`;

    const blob = new Blob([content], { 
      type: format === "PDF" ? "application/pdf" : "text/csv" 
    });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${report.name.replace(/\s+/g, '_')}_${format}.${format.toLowerCase()}`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const generateReport = (type, period) => {
    setIsGenerating(true);
    
    // Simulate report generation
    setTimeout(() => {
      const newReport = {
        id: `RPT${String(reports.length + 1).padStart(3, '0')}`,
        name: `${period} ${type}`,
        type: type,
        generatedDate: new Date().toISOString().split('T')[0],
        period: period,
        status: "completed",
        fileSize: `${(Math.random() * 10 + 1).toFixed(1)} MB`,
        format: "PDF",
        content: {
          generatedAt: new Date().toLocaleString(),
          type: type,
          period: period,
          dataPoints: Math.floor(Math.random() * 100) + 50
        }
      };
      
      setReports([newReport, ...reports]);
      setIsGenerating(false);
      alert(`${period} ${type} generated successfully!`);
    }, 2000);
  };

  const exportAuditTrail = () => {
    const csvContent = [
      ["ID", "Action", "User", "Target", "Timestamp", "IP Address"],
      ...auditTrail.map(entry => [
        entry.id,
        entry.action,
        entry.user,
        entry.target,
        entry.timestamp,
        entry.ipAddress
      ])
    ].map(row => row.join(",")).join("\n");

    const blob = new Blob([csvContent], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `audit_trail_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const viewReportDetails = (report) => {
    alert(`Report Details:\n\nName: ${report.name}\nType: ${report.type}\nPeriod: ${report.period}\nStatus: ${report.status}\nSize: ${report.fileSize || 'Processing'}`);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent">
            Compliance & Reports
          </h1>
          <p className="text-muted-foreground mt-2">
            Generate compliance reports and maintain audit trails
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            Settings
          </Button>
          <Button 
            variant="outline" 
            className="flex items-center gap-2"
            onClick={exportAuditTrail}
          >
            <Download className="h-4 w-4" />
            Export Audit
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid gap-6 md:grid-cols-4">
        <Card className="bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-700">Total Reports</CardTitle>
            <FileText className="h-5 w-5 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-blue-900">{totalReports}</div>
            <p className="text-xs text-blue-600 mt-1">This month</p>
          </CardContent>
        </Card>
        
        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-700">Completed</CardTitle>
            <BarChart3 className="h-5 w-5 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-900">{completedReports}</div>
            <p className="text-xs text-green-600 mt-1">Ready for download</p>
            <Badge variant="secondary" className="mt-2 bg-green-100 text-green-700">
              +{Math.round((completedReports/totalReports) * 100)}% rate
            </Badge>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-yellow-50 to-amber-50 border-yellow-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-yellow-700">Processing</CardTitle>
            <Activity className="h-5 w-5 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-yellow-900">{processingReports}</div>
            <p className="text-xs text-yellow-600 mt-1">In progress</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-violet-50 border-purple-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-purple-700">Audit Entries</CardTitle>
            <TrendingUp className="h-5 w-5 text-purple-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-purple-900">{auditEntries}</div>
            <p className="text-xs text-purple-600 mt-1">Last 24 hours</p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Search reports by name or type..."
              className="pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={reportTypeFilter} onValueChange={setReportTypeFilter}>
            <SelectTrigger className="w-[140px]">
              <SelectValue placeholder="Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="Donation Report">Donation</SelectItem>
              <SelectItem value="Quality Report">Quality</SelectItem>
              <SelectItem value="Distribution Report">Distribution</SelectItem>
              <SelectItem value="Compliance Report">Compliance</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[140px]">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="processing">Processing</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Report Generation */}
      <div className="grid gap-6 lg:grid-cols-2">
        <Card className="border-0 shadow-lg">
          <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100/50 rounded-t-lg border-b">
            <CardTitle className="text-xl font-bold">Generate New Report</CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid gap-4 md:grid-cols-2">
              <Button 
                className="h-20 flex-col bg-gradient-to-br from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600"
                onClick={() => generateReport("Daily Report", new Date().toLocaleDateString())}
                disabled={isGenerating}
              >
                <FileText className="h-6 w-6 mb-2" />
                <span>Daily Report</span>
              </Button>
              
              <Button 
                className="h-20 flex-col" 
                variant="outline"
                onClick={() => generateReport("Weekly Report", "This Week")}
                disabled={isGenerating}
              >
                <Calendar className="h-6 w-6 mb-2" />
                <span>Weekly Report</span>
              </Button>
              
              <Button 
                className="h-20 flex-col" 
                variant="outline"
                onClick={() => generateReport("Monthly Report", "This Month")}
                disabled={isGenerating}
              >
                <BarChart3 className="h-6 w-6 mb-2" />
                <span>Monthly Report</span>
              </Button>
              
              <Button 
                className="h-20 flex-col" 
                variant="outline"
                onClick={() => generateReport("Custom Report", "Custom Period")}
                disabled={isGenerating}
              >
                <TrendingUp className="h-6 w-6 mb-2" />
                <span>Custom Report</span>
              </Button>
            </div>
            {isGenerating && (
              <div className="flex items-center justify-center mt-4 text-blue-600">
                <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                Generating report...
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="border-0 shadow-lg">
          <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100/50 rounded-t-lg border-b">
            <CardTitle className="text-xl font-bold">Export Options</CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="space-y-3">
              <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div>
                  <div className="font-medium text-blue-900">PDF Format</div>
                  <div className="text-sm text-blue-600">Professional reports with charts</div>
                </div>
                <Button 
                  size="sm" 
                  className="bg-blue-500 hover:bg-blue-600"
                  onClick={() => filteredReports.forEach(report => downloadReport(report, "PDF"))}
                >
                  <FileDown className="h-4 w-4 mr-1" />
                  Export All PDF
                </Button>
              </div>
              
              <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg border border-green-200">
                <div>
                  <div className="font-medium text-green-900">Excel Format</div>
                  <div className="text-sm text-green-600">Raw data for analysis</div>
                </div>
                <Button 
                  size="sm" 
                  variant="outline" 
                  className="border-green-300 text-green-700 hover:bg-green-50"
                  onClick={() => filteredReports.forEach(report => downloadReport(report, "Excel"))}
                >
                  <FileDown className="h-4 w-4 mr-1" />
                  Export All Excel
                </Button>
              </div>
              
              <div className="flex justify-between items-center p-3 bg-purple-50 rounded-lg border border-purple-200">
                <div>
                  <div className="font-medium text-purple-900">CSV Format</div>
                  <div className="text-sm text-purple-600">Simple data format</div>
                </div>
                <Button 
                  size="sm" 
                  variant="outline" 
                  className="border-purple-300 text-purple-700 hover:bg-purple-50"
                  onClick={() => filteredReports.forEach(report => downloadReport(report, "CSV"))}
                >
                  <FileDown className="h-4 w-4 mr-1" />
                  Export All CSV
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recent Reports */}
      <Card className="border-0 shadow-lg">
        <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100/50 rounded-t-lg border-b">
          <div className="flex items-center justify-between">
            <CardTitle className="text-xl font-bold">Recent Reports</CardTitle>
            <Badge variant="outline" className="px-3 py-1">
              {filteredReports.length} reports
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50/80">
                <tr>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Report Name</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Type</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Period</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Generated</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Size</th>
                  <th className="text-center py-4 px-6 font-semibold text-gray-700">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200/60">
                {filteredReports.map((report) => (
                  <tr key={report.id} className="hover:bg-gray-50/50 transition-colors">
                    <td className="py-4 px-6">
                      <div className="font-medium text-gray-900">{report.name}</div>
                      <div className="text-xs text-gray-500">{report.id}</div>
                    </td>
                    <td className="py-4 px-6">
                      <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                        {report.type}
                      </Badge>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-600">{report.period}</td>
                    <td className="py-4 px-6 text-sm text-gray-600">{report.generatedDate}</td>
                    <td className="py-4 px-6">
                      <StatusBadge variant={getReportStatusVariant(report.status)}>
                        <span className="capitalize">{report.status}</span>
                      </StatusBadge>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-600">
                      {report.fileSize || (
                        <div className="flex items-center text-yellow-600">
                          <RefreshCw className="h-3 w-3 animate-spin mr-1" />
                          Processing...
                        </div>
                      )}
                    </td>
                    <td className="py-4 px-6">
                      <div className="flex gap-2 justify-center">
                        {report.status === "completed" && (
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => downloadReport(report)}
                            className="flex items-center gap-1"
                          >
                            <Download className="h-4 w-4" />
                            Download
                          </Button>
                        )}
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => viewReportDetails(report)}
                          className="flex items-center gap-1"
                        >
                          <Eye className="h-4 w-4" />
                          Details
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Audit Trail */}
      <Card className="border-0 shadow-lg">
        <CardHeader className="bg-gradient-to-r from-gray-50 to-gray-100/50 rounded-t-lg border-b">
          <CardTitle className="text-xl font-bold">Audit Trail</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50/80">
                <tr>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Action</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">User</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Target</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">Timestamp</th>
                  <th className="text-left py-4 px-6 font-semibold text-gray-700">IP Address</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200/60">
                {auditTrail.map((entry) => (
                  <tr key={entry.id} className="hover:bg-gray-50/50 transition-colors">
                    <td className="py-4 px-6">
                      <StatusBadge variant="info">
                        {entry.action}
                      </StatusBadge>
                    </td>
                    <td className="py-4 px-6 text-sm font-medium text-gray-900">{entry.user}</td>
                    <td className="py-4 px-6 text-sm text-gray-600">{entry.target}</td>
                    <td className="py-4 px-6 text-sm font-mono text-gray-500">{entry.timestamp}</td>
                    <td className="py-4 px-6 text-sm font-mono text-gray-500">{entry.ipAddress}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}